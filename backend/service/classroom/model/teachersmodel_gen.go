// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	teachersFieldNames          = builder.RawFieldNames(&Teachers{})
	teachersRows                = strings.Join(teachersFieldNames, ",")
	teachersRowsExpectAutoSet   = strings.Join(stringx.Remove(teachersFieldNames, "`teacher_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	teachersRowsWithPlaceHolder = strings.Join(stringx.Remove(teachersFieldNames, "`teacher_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	teachersModel interface {
		Insert(ctx context.Context, data *Teachers) (sql.Result, error)
		FindOne(ctx context.Context, teacherId int64) (*Teachers, error)
		FindOneByUserId(ctx context.Context, userId int64) (*Teachers, error)
		Update(ctx context.Context, data *Teachers) error
		Delete(ctx context.Context, teacherId int64) error
	}

	defaultTeachersModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Teachers struct {
		TeacherId  int64          `db:"teacher_id"`
		UserId     int64          `db:"user_id"`
		ClassId    sql.NullInt64  `db:"class_id"`
		Bio        sql.NullString `db:"bio"`
		CreateTime int64          `db:"create_time"`
		UpdateTime int64          `db:"update_time"`
	}
)

func newTeachersModel(conn sqlx.SqlConn) *defaultTeachersModel {
	return &defaultTeachersModel{
		conn:  conn,
		table: "`teachers`",
	}
}

func (m *defaultTeachersModel) Delete(ctx context.Context, teacherId int64) error {
	query := fmt.Sprintf("delete from %s where `teacher_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, teacherId)
	return err
}

func (m *defaultTeachersModel) FindOne(ctx context.Context, teacherId int64) (*Teachers, error) {
	query := fmt.Sprintf("select %s from %s where `teacher_id` = ? limit 1", teachersRows, m.table)
	var resp Teachers
	err := m.conn.QueryRowCtx(ctx, &resp, query, teacherId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTeachersModel) FindOneByUserId(ctx context.Context, userId int64) (*Teachers, error) {
	var resp Teachers
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", teachersRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTeachersModel) Insert(ctx context.Context, data *Teachers) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, teachersRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.ClassId, data.Bio)
	return ret, err
}

func (m *defaultTeachersModel) Update(ctx context.Context, newData *Teachers) error {
	query := fmt.Sprintf("update %s set %s where `teacher_id` = ?", m.table, teachersRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.UserId, newData.ClassId, newData.Bio, newData.TeacherId)
	return err
}

func (m *defaultTeachersModel) tableName() string {
	return m.table
}
