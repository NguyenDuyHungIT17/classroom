// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	enrollmentsFieldNames          = builder.RawFieldNames(&Enrollments{})
	enrollmentsRows                = strings.Join(enrollmentsFieldNames, ",")
	enrollmentsRowsExpectAutoSet   = strings.Join(stringx.Remove(enrollmentsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	enrollmentsRowsWithPlaceHolder = strings.Join(stringx.Remove(enrollmentsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	enrollmentsModel interface {
		Insert(ctx context.Context, data *Enrollments) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Enrollments, error)
		Update(ctx context.Context, data *Enrollments) error
		Delete(ctx context.Context, id int64) error
	}

	defaultEnrollmentsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Enrollments struct {
		Id        int64     `db:"id"`
		StudentId int64     `db:"student_id"`
		ClassId   int64     `db:"class_id"`
		JoinTime  time.Time `db:"join_time"`
	}
)

func newEnrollmentsModel(conn sqlx.SqlConn) *defaultEnrollmentsModel {
	return &defaultEnrollmentsModel{
		conn:  conn,
		table: "`enrollments`",
	}
}

func (m *defaultEnrollmentsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultEnrollmentsModel) FindOne(ctx context.Context, id int64) (*Enrollments, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", enrollmentsRows, m.table)
	var resp Enrollments
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEnrollmentsModel) Insert(ctx context.Context, data *Enrollments) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, enrollmentsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.StudentId, data.ClassId, data.JoinTime)
	return ret, err
}

func (m *defaultEnrollmentsModel) Update(ctx context.Context, data *Enrollments) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, enrollmentsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.StudentId, data.ClassId, data.JoinTime, data.Id)
	return err
}

func (m *defaultEnrollmentsModel) tableName() string {
	return m.table
}
