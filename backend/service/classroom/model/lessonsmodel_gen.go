// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	lessonsFieldNames          = builder.RawFieldNames(&Lessons{})
	lessonsRows                = strings.Join(lessonsFieldNames, ",")
	lessonsRowsExpectAutoSet   = strings.Join(stringx.Remove(lessonsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	lessonsRowsWithPlaceHolder = strings.Join(stringx.Remove(lessonsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	lessonsModel interface {
		Insert(ctx context.Context, data *Lessons) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Lessons, error)
		Update(ctx context.Context, data *Lessons) error
		Delete(ctx context.Context, id int64) error
	}

	defaultLessonsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Lessons struct {
		Id         int64          `db:"id"`
		SubjectId  int64          `db:"subject_id"`
		Title      string         `db:"title"`
		Content    sql.NullString `db:"content"`
		FileUrl    sql.NullString `db:"file_url"`
		UploadTime time.Time      `db:"upload_time"`
	}
)

func newLessonsModel(conn sqlx.SqlConn) *defaultLessonsModel {
	return &defaultLessonsModel{
		conn:  conn,
		table: "`lessons`",
	}
}

func (m *defaultLessonsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultLessonsModel) FindOne(ctx context.Context, id int64) (*Lessons, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", lessonsRows, m.table)
	var resp Lessons
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLessonsModel) Insert(ctx context.Context, data *Lessons) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, lessonsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.SubjectId, data.Title, data.Content, data.FileUrl, data.UploadTime)
	return ret, err
}

func (m *defaultLessonsModel) Update(ctx context.Context, data *Lessons) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, lessonsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.SubjectId, data.Title, data.Content, data.FileUrl, data.UploadTime, data.Id)
	return err
}

func (m *defaultLessonsModel) tableName() string {
	return m.table
}
