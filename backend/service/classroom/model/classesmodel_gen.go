// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	classesFieldNames          = builder.RawFieldNames(&Classes{})
	classesRows                = strings.Join(classesFieldNames, ",")
	classesRowsExpectAutoSet   = strings.Join(stringx.Remove(classesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	classesRowsWithPlaceHolder = strings.Join(stringx.Remove(classesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	classesModel interface {
		Insert(ctx context.Context, data *Classes) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Classes, error)
		FindOneByClassCode(ctx context.Context, classCode string) (*Classes, error)
		Update(ctx context.Context, data *Classes) error
		Delete(ctx context.Context, id int64) error
	}

	defaultClassesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Classes struct {
		Id          int64          `db:"id"`
		ClassCode   string         `db:"class_code"`
		ClassName   string         `db:"class_name"`
		Description sql.NullString `db:"description"`
		TeacherId   int64          `db:"teacher_id"`
		CreateTime  int64          `db:"create_time"`
		UpdateTime  int64          `db:"update_time"`
	}
)

func newClassesModel(conn sqlx.SqlConn) *defaultClassesModel {
	return &defaultClassesModel{
		conn:  conn,
		table: "`classes`",
	}
}

func (m *defaultClassesModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultClassesModel) FindOne(ctx context.Context, id int64) (*Classes, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", classesRows, m.table)
	var resp Classes
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultClassesModel) FindOneByClassCode(ctx context.Context, classCode string) (*Classes, error) {
	var resp Classes
	query := fmt.Sprintf("select %s from %s where `class_code` = ? limit 1", classesRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, classCode)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultClassesModel) Insert(ctx context.Context, data *Classes) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, classesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ClassCode, data.ClassName, data.Description, data.TeacherId)
	return ret, err
}

func (m *defaultClassesModel) Update(ctx context.Context, newData *Classes) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, classesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ClassCode, newData.ClassName, newData.Description, newData.TeacherId, newData.Id)
	return err
}

func (m *defaultClassesModel) tableName() string {
	return m.table
}
