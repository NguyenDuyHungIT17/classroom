// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	gradeComponentsFieldNames          = builder.RawFieldNames(&GradeComponents{})
	gradeComponentsRows                = strings.Join(gradeComponentsFieldNames, ",")
	gradeComponentsRowsExpectAutoSet   = strings.Join(stringx.Remove(gradeComponentsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	gradeComponentsRowsWithPlaceHolder = strings.Join(stringx.Remove(gradeComponentsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	gradeComponentsModel interface {
		Insert(ctx context.Context, data *GradeComponents) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GradeComponents, error)
		Update(ctx context.Context, data *GradeComponents) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGradeComponentsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GradeComponents struct {
		Id            int64   `db:"id"`
		SubjectId     int64   `db:"subject_id"`
		ComponentName string  `db:"component_name"`
		Weight        float64 `db:"weight"`
	}
)

func newGradeComponentsModel(conn sqlx.SqlConn) *defaultGradeComponentsModel {
	return &defaultGradeComponentsModel{
		conn:  conn,
		table: "`grade_components`",
	}
}

func (m *defaultGradeComponentsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGradeComponentsModel) FindOne(ctx context.Context, id int64) (*GradeComponents, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", gradeComponentsRows, m.table)
	var resp GradeComponents
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGradeComponentsModel) Insert(ctx context.Context, data *GradeComponents) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, gradeComponentsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.SubjectId, data.ComponentName, data.Weight)
	return ret, err
}

func (m *defaultGradeComponentsModel) Update(ctx context.Context, data *GradeComponents) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, gradeComponentsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.SubjectId, data.ComponentName, data.Weight, data.Id)
	return err
}

func (m *defaultGradeComponentsModel) tableName() string {
	return m.table
}
