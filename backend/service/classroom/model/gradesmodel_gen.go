// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	gradesFieldNames          = builder.RawFieldNames(&Grades{})
	gradesRows                = strings.Join(gradesFieldNames, ",")
	gradesRowsExpectAutoSet   = strings.Join(stringx.Remove(gradesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	gradesRowsWithPlaceHolder = strings.Join(stringx.Remove(gradesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	gradesModel interface {
		Insert(ctx context.Context, data *Grades) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Grades, error)
		Update(ctx context.Context, data *Grades) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGradesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Grades struct {
		Id          int64     `db:"id"`
		StudentId   int64     `db:"student_id"`
		ComponentId int64     `db:"component_id"`
		Score       float64   `db:"score"`
		GradeTime   time.Time `db:"grade_time"`
	}
)

func newGradesModel(conn sqlx.SqlConn) *defaultGradesModel {
	return &defaultGradesModel{
		conn:  conn,
		table: "`grades`",
	}
}

func (m *defaultGradesModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGradesModel) FindOne(ctx context.Context, id int64) (*Grades, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", gradesRows, m.table)
	var resp Grades
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGradesModel) Insert(ctx context.Context, data *Grades) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, gradesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.StudentId, data.ComponentId, data.Score, data.GradeTime)
	return ret, err
}

func (m *defaultGradesModel) Update(ctx context.Context, data *Grades) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, gradesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.StudentId, data.ComponentId, data.Score, data.GradeTime, data.Id)
	return err
}

func (m *defaultGradesModel) tableName() string {
	return m.table
}
