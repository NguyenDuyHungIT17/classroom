// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	subjectsFieldNames          = builder.RawFieldNames(&Subjects{})
	subjectsRows                = strings.Join(subjectsFieldNames, ",")
	subjectsRowsExpectAutoSet   = strings.Join(stringx.Remove(subjectsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	subjectsRowsWithPlaceHolder = strings.Join(stringx.Remove(subjectsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	subjectsModel interface {
		Insert(ctx context.Context, data *Subjects) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Subjects, error)
		Update(ctx context.Context, data *Subjects) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSubjectsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Subjects struct {
		Id          int64          `db:"id"`
		ClassId     int64          `db:"class_id"`
		SubjectName string         `db:"subject_name"`
		Description sql.NullString `db:"description"`
		CreateTime  time.Time      `db:"create_time"`
		UpdateTime  time.Time      `db:"update_time"`
	}
)

func newSubjectsModel(conn sqlx.SqlConn) *defaultSubjectsModel {
	return &defaultSubjectsModel{
		conn:  conn,
		table: "`subjects`",
	}
}

func (m *defaultSubjectsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSubjectsModel) FindOne(ctx context.Context, id int64) (*Subjects, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", subjectsRows, m.table)
	var resp Subjects
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSubjectsModel) Insert(ctx context.Context, data *Subjects) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, subjectsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ClassId, data.SubjectName, data.Description)
	return ret, err
}

func (m *defaultSubjectsModel) Update(ctx context.Context, data *Subjects) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, subjectsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ClassId, data.SubjectName, data.Description, data.Id)
	return err
}

func (m *defaultSubjectsModel) tableName() string {
	return m.table
}
