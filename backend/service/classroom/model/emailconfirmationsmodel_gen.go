// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	emailConfirmationsFieldNames          = builder.RawFieldNames(&EmailConfirmations{})
	emailConfirmationsRows                = strings.Join(emailConfirmationsFieldNames, ",")
	emailConfirmationsRowsExpectAutoSet   = strings.Join(stringx.Remove(emailConfirmationsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	emailConfirmationsRowsWithPlaceHolder = strings.Join(stringx.Remove(emailConfirmationsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	emailConfirmationsModel interface {
		Insert(ctx context.Context, data *EmailConfirmations) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*EmailConfirmations, error)
		Update(ctx context.Context, data *EmailConfirmations) error
		Delete(ctx context.Context, id int64) error
	}

	defaultEmailConfirmationsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	EmailConfirmations struct {
		Id               int64        `db:"id"`
		UserId           int64        `db:"user_id"`
		ConfirmationCode string       `db:"confirmation_code"`
		IsVerified       bool         `db:"is_verified"`
		SentTime         time.Time    `db:"sent_time"`
		VerifiedTime     sql.NullTime `db:"verified_time"`
	}
)

func newEmailConfirmationsModel(conn sqlx.SqlConn) *defaultEmailConfirmationsModel {
	return &defaultEmailConfirmationsModel{
		conn:  conn,
		table: "`email_confirmations`",
	}
}

func (m *defaultEmailConfirmationsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultEmailConfirmationsModel) FindOne(ctx context.Context, id int64) (*EmailConfirmations, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", emailConfirmationsRows, m.table)
	var resp EmailConfirmations
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEmailConfirmationsModel) Insert(ctx context.Context, data *EmailConfirmations) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, emailConfirmationsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.ConfirmationCode, data.IsVerified, data.SentTime, data.VerifiedTime)
	return ret, err
}

func (m *defaultEmailConfirmationsModel) Update(ctx context.Context, data *EmailConfirmations) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, emailConfirmationsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.ConfirmationCode, data.IsVerified, data.SentTime, data.VerifiedTime, data.Id)
	return err
}

func (m *defaultEmailConfirmationsModel) tableName() string {
	return m.table
}
